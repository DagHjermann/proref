---
title: "53_Proref_revision_2024"
format: html
---

This script runs the PROREF procedure for all stations, parameters and basises  
- Three "stopping" rules are used (Background1, Background1b and Background2)  
- The final results are for Background1 (all stations not being different at P < 0.10, and the ratio of concentration medians between the cleanest and dirties background station is not allowed to be above 2  
- The whole script is a bit slow - it takes about 1 hour 15 minutes (one hour for "Run analysis for data through 2022", one hour for "add the actual proref")  

## Packages, loading functions

```{r}
library(data.table)
library(dplyr)
library(purrr)
library(ggplot2)
library(forcats)
library(ggeasy)
library(tidyr)
library(glue)
library(ggrepel)
library(stringr)
# install.packages("furrr")
library(furrr)

# install.packages("xlsx")
# library(xlsx)

source("54fun_Calculate_PROREF_functions.R")

# For parallell processing (coding not finished)
# - see "Run analysis for data through 2022, parallel processing"
# library(doParallel)
# cl <- makeCluster(10)
# registerDoParallel(cores = 10)

years_backgr2 <- 1992:2022

# For printout:
hyphens <- "-------------------------------------------------------------------------------\n"

```

## Data through 2022  

### Raw data for analysis  

- We will also take basis into account  
- To simplify matters, we just modify PARAM so it also contains basis 
information

```{r}

# For simplicity, instead of introducing the "Basis" parameter in 
# all functions it's needed, we instead combine PARAM 
# and Basis using double underscore into a modified PARAM value.
# E.g. PFOS wet-weight becomes 'PFOS__WW'  

data_all2 <- readRDS("Input_data/2022/105_data_with_uncertainty_2023-09-12.rds") %>%
  rename(YEAR = MYEAR)

data_temporary <- data_all2 %>%
  pivot_longer(
    cols = c(VALUE_WW, VALUE_WWa, VALUE_DW, VALUE_DWa, VALUE_FB, VALUE_FBa), 
    names_to = "Basis",
    values_to = "Concentration"
  ) %>%
  mutate(
    # change e.g. "VALUE_WW" into "WW":    
    Basis = sub("VALUE_", "", Basis, fixed = TRUE),
    # combine PARAM and Basis into a modified PARAM value:  
    PARAM = paste0(PARAM, "__", Basis)
  ) %>%
  filter(!is.na(Concentration))

data_all2 <- data_temporary

```

#### Remove some stations  
```{r}

# "B" mussel stations (industry data, from Langøya?)
xtabs(~STATION_CODE, data_all2 %>% filter(substr(STATION_CODE, 1, 1) == "B"))

data_all2 <- data_all2 %>%
  filter(!substr(STATION_CODE, 1, 1) == "B")

# Atations used for very few years
check <- data_all2 %>%
  distinct(STATION_CODE, YEAR) %>%
  count(STATION_CODE) %>%
  arrange(n)
# check
table(check$n)

# Remove those with less than 5 years 
data_all2 <- data_all2 %>%
  group_by(STATION_CODE) %>%
  mutate(no_years = length(unique(YEAR))) %>%
  filter(no_years >= 5)

check <- data_all2 %>%
  distinct(STATION_CODE, YEAR) %>%
  count(STATION_CODE) %>%
  arrange(n)
# check
table(check$n)


```
#### Check CHR vs. krysen  

```{r}

data_all2 %>%
  filter(PARAM %in% c("Krysen__WW", "CHR__WW", "BAP__WW")) %>%
  xtabs(~YEAR + PARAM, .)

```


#### Change some parameters in list of parameters to be analysed  

```{r}

data_all2 <- data_all2 %>%
  mutate(
    PARAM = case_when(
      grepl("SCCP__", PARAM) ~ sub("SCCP__", "SCCP eksl. LOQ__", PARAM),
      grepl("MCCP__", PARAM) ~ sub("MCCP__", "MCCP eksl. LOQ__", PARAM),
      grepl("Krysen__", PARAM) ~ sub("Krysen__", "CHR__", PARAM),
      TRUE ~ PARAM
    )
  )

```

### Create df_series_sel  

```{r}

# Old:
# df_series_sel <- readxl::read_excel("Info/Proref table - MS version 17.xlsx")
# New: all combinations  
df_series_sel <- data_all2 %>%
  distinct(PARAM, LATIN_NAME, STATION_CODE) %>%
  count(PARAM, LATIN_NAME) %>%
  rename(Species = LATIN_NAME)

# For testing 1 - just one parameter/species:
# df_series_sel <- df_series_sel %>% 
#   filter(PARAM == "CD__WW" & Species == "Gadus morhua")
# For testing 2 - a few random parameter/species:
# df_series_sel <- df_series_sel %>% sample_n(10)


### Check parameters   

do_check <- FALSE
# do_check <- TRUE

if (do_check){
  
  xtabs(~PARAM, data_all2 %>% filter(grepl("SCCP", PARAM)))
  xtabs(~PARAM, df_series_sel %>% filter(grepl("SCCP", PARAM)))
  
  xtabs(~PARAM, data_all2 %>% filter(grepl("PAH", PARAM)))
  xtabs(~PARAM, df_series_sel %>% filter(grepl("PAH", PARAM)))
  
  data_all2 %>%
    filter(PARAM %in% c("Krysen__WW", "CHR__WW", "BAP__WW")) %>%
    xtabs(~YEAR + PARAM, .)
  
}

```



### LOQ levels and <LOQ frequency  

```{r}

loq_summary <- subset(data_all2, YEAR %in% years_backgr2) %>%
  filter(Basis %in% "WW") %>%
  group_by(PARAM, LATIN_NAME, TISSUE_NAME, YEAR) %>%
  summarise(
    N = n(),
    N_under_LOQ = sum(FLAG1 %in% "<"),
    Perc_under_LOQ = N_under_LOQ/N*100,
    LOQ_median = median(Concentration[FLAG1 %in% "<"], na.rm = TRUE)
  ) 

# View(loq_summary)

# "CB_S7__WW", 
pars <- c("CB28__WW", "CB52__WW", "CB101__WW", "CB105__WW", "CB118__WW", "CB138__WW", 
"CB153__WW", "CB180__WW")

data_all2 %>% filter(Basis %in% "WW" & PARAM %in% pars) %>% distinct(PARAM) %>% pull(PARAM) %>% dput()

ggplot(
  loq_summary %>% filter(PARAM %in% pars & LATIN_NAME == "Gadus morhua" &
                           TISSUE_NAME == "Lever"),
  aes(YEAR, LOQ_median, color = PARAM)) +
  geom_path() +
  scale_y_log10() +
  labs(title = "Cod, median LOQ")

ggplot(
  loq_summary %>% filter(PARAM %in% pars & LATIN_NAME == "Mytilus edulis" &
                           TISSUE_NAME == "Whole soft body"),
  aes(YEAR, LOQ_median, color = PARAM)) +
  geom_path() +
  scale_y_log10() +
  labs(title = "Blue mussel, median LOQ")

ggplot(
  loq_summary %>% filter(PARAM %in% pars & LATIN_NAME == "Gadus morhua" &
                           TISSUE_NAME == "Lever"),
  aes(YEAR, Perc_under_LOQ, color = PARAM)) +
  geom_path() +
  labs(title = "Cod, percent < LOQ")

ggplot(
  loq_summary %>% filter(PARAM %in% pars & LATIN_NAME == "Mytilus edulis" &
                           TISSUE_NAME == "Whole soft body"),
  aes(YEAR, Perc_under_LOQ, color = PARAM)) +
  geom_path() +
  labs(title = "Blue mussel, percent < LOQ")

```



### Run analysis, test  

```{r}

# debugonce(get_background_values)

test <- get_background_values(
       determinant = "HG__WWa", 
       species = "Gadus morhua", 
       var_name = "Concentration", 
       years_backgr = 1992:2022,
       data = subset(data_all2, YEAR %in% years_backgr2))

# View(test$differences)     
# View(test$result_one_line)     

```

### Run analysis for data through 2022  

* Ca. 38 minutes with 4 paralell cores  

```{r, results='hide'}

cat(hyphens, "Number of selected compounds x basis (per species)\n", hyphens)  
df_series_sel$Species %>% table()

years_backgr2 <- 1992:2022

# "Safe" version of function (doesn't break the loop if there are errors)
get_background_values_s <- safely(get_background_values)

plan(multisession, workers = 4)

t0 <- Sys.time()
# result_list is calculated using map along all rows of df_series_sel 
# (not along all possible combinations of param and species)  
result_list <- future_map(
     seq_len(nrow(df_series_sel)), 
     \(.x) get_background_values_s(
       determinant = df_series_sel$PARAM[.x], 
       species = df_series_sel$Species[.x], 
       var_name = "Concentration", 
       years_backgr = 1992:2022,
       data = subset(data_all2, YEAR %in% years_backgr2))
     )
t1 <- Sys.time()
t1-t0

# str(result_list[1:3], 2)

# writexl::write_xlsx(result, "Data/Proref_2022_version1.xlsx")   

```


#### Summary  

* Trenger  
    - hvor mange stasjoner man starta med  
    - varighet på hver stasjon  
    - hvor mange år (år x stasjon?) bygger proref på  

```{r}

cat("Time used:\n")
t1-t0
cat("\n")

ok <- map(result_list, "error") %>% map_lgl(is.null)
cat(hyphens, "Number of successful compound*species\n", hyphens)
cat(sum(ok), "out of", length(ok), "\n")

result <- map_dfr(result_list[ok], c("result", "result_one_line"))  
cat(hyphens, "Result\n", hyphens)
str(result)

```

### Get detailed results  

This results in a data frame with one row for every step in the analysis (each station added) and three boolean (TRUE/FALSE) variables:    
- Background1 = TRUE for all stations not being different at P < 0.10  
- Background1b = As Background1, but also the ratio beteween stations medians is not allowed to be above 2  
- Background2 = TRUE for all stations not being different at P < 0.05       

```{r}

# str(result_list[[1]]$result, 1)

result_detailed <- map_dfr(result_list[ok], c("result", "differences"))  
cat(hyphens, "Detailed result\n", hyphens)
str(result_detailed)

threshold_p1 <- 0.10
threshold_p2 <- 0.05
threshold_medianratio <- 2

# Adding columns for background and last rank  

# P > 0.1 limit:
#   P_change1 = TRUE for the first station going over P > 0.1  
#   P_sum1 = 0 for background stations, 1 for non-background  
#   Background1 = background stations 
#   Background1b = as Background1 but the ratio beteween stations medians is not allowed 
#     to be above 2
# P > 0.05 limit:
#   P_change2 = TRUE for the first station going over P > 0.05  
#   P_sum2 = 0 for background stations, 1 for non-background  


result_detailed <- result_detailed %>% 
    # filter(PARAM %in% "CU" & LATIN_NAME %in% species) %>%   
    group_by(PARAM, LATIN_NAME, TISSUE_NAME) %>%
    mutate(
      P_round = round(P, 3),       # just for more easily readable output
      P_prev = lag(P_round),        # previous P value
      P_change1 = case_when(
        Rank == 1 ~ FALSE,
        TRUE ~ (P < threshold_p1) & (P_prev >= threshold_p1)), # change in P value
      P_cum1 = cumsum(P_change1), # cumulative change
      P_change2 = case_when(
        Rank == 1 ~ FALSE,
        TRUE ~ (P < threshold_p2) & (P_prev >= threshold_p2)), # change in P value
      P_cum2 = cumsum(P_change2), # cumulative change
      Background1 = case_when(
        P_cum1 == 0 ~ "Background",
        TRUE ~ "Other"),
      Background1b = case_when(
        P_cum1 == 0 & Median_ratio <= threshold_medianratio ~ "Background",
        TRUE ~ "Other"),
      Background2 = case_when(
        P_cum2 == 0 ~ "Background",
        TRUE ~ "Other"),
      Background = case_when(
        Background1b == "Background" ~ "Background 1b and 2",
        Background1 == "Background" ~ "Background 1 and 2",
        Background2 == "Background" ~ "Background 2",
        TRUE ~ "Other"),
      # This is used only for adding PARAM label to the last station
      #   in plots:
      Last_rank = (Rank == max(Rank))
      ) %>% 
  ungroup() %>%
    mutate(
      Line_label = case_when(
        Last_rank ~ PARAM,
        TRUE ~ NA)
    ) #%>%
  #select(-P_prev, -P_change1, -P_cum1, -P_change2, -P_cum2, -Last_rank)

```

#### Save and make table check 

```{r}


if (FALSE){

  saveRDS(result_detailed, "Data/54_result_detailed_2024-11-29.rds")  # HARD-CODED

  # result_detailed <- readRDS( "Data/54_result_detailed_2024-11-29.rds")  

}

xtabs(~Background, result_detailed)

```

#### Plot detailed data - example    

```{r}

param <- "CU__WW"
species <- "Mytilus edulis"

result_sel <- result_detailed %>%
  filter(PARAM == param & LATIN_NAME == species)

# Background stations - here using 'Background1b'  (HARD-CODED) 
result_sel %>%
  filter(Background1b == "Background") %>%
  pull(Station) %>%
  paste(collapse = ", ")

# Get medians (as a list)
annualmedians_result <- get_lower_medians(par = param, 
                                          sp = species, 
                                          ti = find_tissue(param, species), 
                                          data = as.data.frame(subset(data_all2, YEAR %in% 1992:2022)), 
                                          variable_name = "Concentration", 
                                          min_indiv_per_year = find_min_indiv_per_year(species))
str(annualmedians_result, 1)
# annualmedians$median_per_station

ggplot(result_sel, aes(Rank, Median2)) +
  geom_line() +
  geom_point(aes(col = Background1b)) +
  geom_text_repel(aes(label = glue("{Station} (P = {P_round})")), hjust = 0, 
                  nudge_x = 0.5, point.padding = 0.2, box.padding = 0.25, direction = "y") +
  # Line at 2x the cleanest station
  geom_hline(aes(yintercept = 2*result_sel$Median2[1]), linetype = "dashed", colour = "brown") +
  expand_limits(y = 0)

ggplot(result_sel, aes(x = Min_year, xend = Max_year, y = Median2)) +
  geom_segment(aes(col = Background1b)) +
  expand_limits(y = 0)

# Combine medians to a data frame, and add the 'Background1b' column    
# Note: specifying 'Background1b' as the background we use here (HARD-CODED)
df_medians <- annualmedians_result$data_medians_list %>% 
  bind_rows() %>%
  rename(Station = STATION_CODE) %>%
  left_join(result_sel %>% select(Station, Background1b),
            by = join_by(Station), relationship = "many-to-one")

ggplot(df_medians, aes(YEAR, median, group = Station, colour = Background1b)) +
  geom_line()

ggplot(df_medians %>% filter(Background1b == "Background"), 
       aes(YEAR, median, colour = Station)) +
  geom_line() +
  geom_point()

```


### Summarize results  

```{r}

resultlist <- list(
    result_detailed %>% 
      filter(Background1b %in% "Background") %>%
      mutate(Background = "Background 1b"),
    result_detailed %>% 
      filter(Background1 %in% "Background") %>%
      mutate(Background = "Background 1"),
    result_detailed %>% 
      filter(Background2 %in% "Background") %>%
      mutate(Background = "Background 2"))

result_summ <- map_dfr(
  resultlist,
  \(df) df  %>%
    group_by(PARAM, LATIN_NAME) %>%
    summarize(
      Background = first(Background),
      Stations = paste(Station, collapse = ", "),
      Median_ratio = max(Median_ratio),
      n = n(), 
      Median_nyears = median(N_years),
      Median_firstyear = median(Min_year),
      Median_lastyear = median(Max_year),
      .groups = "drop"
    ))  %>%
  arrange(PARAM, LATIN_NAME, Background) 

```

#### Add potential number of stations  

```{r}

result_potential_number_of_stations <- result_detailed %>%
  count(PARAM, LATIN_NAME, name = "n_potential_stations")

result_summ <- result_summ %>%
  left_join(
    result_potential_number_of_stations, 
    by = join_by(PARAM, LATIN_NAME),
    relationship = "many-to-one"
  )

```

#### Add the actual PROREF values  

- takes 36 minutes with 4 cores running in parallel  

```{r}

t0 <- Sys.time()

# debugonce(get_conc_percentiles)

result_summ$PROREF <- future_map_dbl(
  seq_len(nrow(result_summ)),
  \(i) get_conc_percentiles(
    determinant = result_summ$PARAM[i], 
    species = result_summ$LATIN_NAME[i], 
    stationstring = result_summ$Stations[i], 
    data = subset(data_all2, YEAR %in% years_backgr2), 
    var_name = "Concentration")
)

t1 <- Sys.time()
t1-t0

```


#### Recreate the original PARAM and BASIS  

```{r}

# Split PARAM (e.g. 'PFOS__WW') up back into
# PARAM (e.g. 'PFOS') and BASIS (e.g. "WW)

X <- strsplit(result_summ$PARAM, split = "__")
result_summ$PARAM <- map_chr(X, 1)
result_summ$Basis <- map_chr(X, 2)
result_summ <- result_summ %>%
  select(PARAM, Basis, everything())

# View(result_summ)
```


### Save  

```{r}

if (FALSE){
  
result_summ %>%
  readr::write_csv("Data/54_result_summ_2024-11-29.csv")  # HARD-CODED

result_summ %>%
  filter(Background %in% "Background 1b") %>%
  readr::write_csv("Data/54_result_summ_final_2024-11-29.csv.csv")  # HARD-CODED

}

```




